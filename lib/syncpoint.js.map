{"version":3,"sources":["../src/syncpoint.js"],"names":["SyncPoint","_numberOfSegment","number","segmentNumber","_numberOfNextSegment","newSegmentNumber","maxNumberOfSegment","uid","maxNumber","then","bind","pointsAtRange","minNumber","notifyNewNumberOfSegment","resolvingConflicts","serverPoints","clientPoints","numberOfSegment","savePoints","points","sync","syncId","clientNumberOfSegment","newPoints","undefined","length","conflictsPoints","reversePoints","numberOfNextSegment"],"mappings":"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","file":"syncpoint.js","sourcesContent":["export default class SyncPoint{\n    _numberOfSegment(number){\n        let segmentNumber = number >> 16;\n        return segmentNumber << 16;\n    }\n\n    _numberOfNextSegment(number){\n         let newSegmentNumber = (number >> 16) + 1;\n         return newSegmentNumber << 16;\n    }   \n\n    maxNumberOfSegment(uid){\n        // Number Format: segmentNumber << 16 | serialNumber\n        return this.maxNumber(uid).then(function(maxNumber){\n            if(maxNumber > 0){\n                return this._numberOfNextSegment(maxNumber);\n            }\n            return 0 << 16;\n        }.bind(this));\n    }\n\n    maxNumber(uid){\n        // Override it (e.g. load maximum segment number from database)\n        // Return Promise\n    }\n\n    pointsAtRange(uid, minNumber, maxNumber){\n        // Override it, exclusive maxNumber (e.g. query from database)\n        // Return Promise\n    }\n\n    notifyNewNumberOfSegment(uid, number){\n        // Override it (e.g. push message to client)\n    }\n\n    resolvingConflicts(serverPoints, clientPoints, numberOfSegment){\n        // Override it, calculate resolve conflicts points, and set syncNumber\n    }\n\n    savePoints(uid, points){\n        // Override it (e.g. save to database)\n        // Return Promise\n    }\n\n    // Important! Serial execution\n    sync(uid, syncId, clientNumberOfSegment, newPoints){\n        return this.maxNumberOfSegment(uid).then(function(numberOfSegment){\n            if(clientNumberOfSegment < numberOfSegment){\n                return this.pointsAtRange(uid, clientNumberOfSegment, numberOfSegment).then(function(serverPoints){\n                    if(newPoints == undefined || newPoints.length == 0){\n                        return {\n                            \"id\": ++syncId,\n                            \"points\": serverPoints,\n                            \"numberOfSegment\": numberOfSegment\n                        };\n                    } else {\n                        let [conflictsPoints, reversePoints] = this.resolvingConflicts(serverPoints, newPoints, numberOfSegment);\n                        if(conflictsPoints.length > 0){\n                            return this.savePoints(uid, conflictsPoints).then(function(){\n                                let numberOfNextSegment = this._numberOfNextSegment(numberOfSegment);\n                                this.notifyNewNumberOfSegment(uid, numberOfNextSegment);\n                                return {\n                                    \"id\": ++syncId,\n                                    \"points\": reversePoints,\n                                    \"numberOfSegment\": numberOfNextSegment\n                                };\n                            }.bind(this));\n                        } else {\n                            return {\n                                \"id\": ++syncId,\n                                \"points\": reversePoints,\n                                \"numberOfSegment\": numberOfSegment\n                            };\n                        }\n                    }\n                }.bind(this));\n            } else { // clientNumberOfSegment == numberOfSegment\n                if(newPoints == undefined || newPoints.length == 0){\n                    return {\n                        \"id\": ++syncId,\n                        \"points\": [],\n                        \"numberOfSegment\": numberOfSegment\n                    };\n                } else {\n                    return this.savePoints(uid, newPoints).then(function(){\n                        let numberOfNextSegment = this._numberOfNextSegment(numberOfSegment);\n                        this.notifyNewNumberOfSegment(uid, numberOfNextSegment);\n                        return {\n                            \"id\": ++syncId,\n                            \"points\": [],\n                            \"numberOfSegment\": numberOfNextSegment\n                        };\n                    }.bind(this));\n                }\n            }\n        }.bind(this));\n    }\n}\n\n/**\n * Point Duck Type\n * syncNumber: Number\n * data: String\n */"]}