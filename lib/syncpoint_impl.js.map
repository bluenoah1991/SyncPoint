{"version":3,"sources":["../src/syncpoint_impl.js"],"names":["SyncPointImpl","constructor","options","undefined","database","httpserver","registerSyncCallback","sync","bind","resolvingConflicts_","start","listen","maxNumber","uid","maxSyncNumber","pointsAtRange","minNumber","savePoints","points","addPoints","resolvingConflicts","serverPoints","clientPoints","numberOfSegment","notifyNewNumberOfSegment","number"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;;;AAEe,MAAMA,aAAN,6BAAqC;AAChDC,gBAAYC,OAAZ,EAAoB;AAChB;AACA,YAAGA,WAAWC,SAAd,EAAwB;AACpBD,sBAAU,EAAV;AACH;AACD,aAAKE,QAAL,GAAgB,uBAAaF,OAAb,CAAhB;AACA,aAAKG,UAAL,GAAkB,yBAAeH,OAAf,CAAlB;AACA,aAAKG,UAAL,CAAgBC,oBAAhB,CAAqC,KAAKC,IAAL,CAAUC,IAAV,CAAe,IAAf,CAArC;AACA,aAAKC,mBAAL,GAA2BP,QAAQ,oBAAR,CAA3B;AACH;;AAEDQ,YAAO;AACH,aAAKL,UAAL,CAAgBM,MAAhB;AACH;;AAEDC,cAAUC,GAAV,EAAc;AACV,eAAO,KAAKT,QAAL,CAAcU,aAAd,CAA4BD,GAA5B,CAAP;AACH;;AAEDE,kBAAcF,GAAd,EAAmBG,SAAnB,EAA8BJ,SAA9B,EAAwC;AACpC,eAAO,KAAKR,QAAL,CAAcW,aAAd,CAA4BF,GAA5B,EAAiCG,SAAjC,EAA4CJ,YAAY,CAAxD,CAAP;AACH;;AAEDK,eAAWJ,GAAX,EAAgBK,MAAhB,EAAuB;AACnB,eAAO,KAAKd,QAAL,CAAce,SAAd,CAAwBN,GAAxB,EAA6BK,MAA7B,CAAP;AACH;;AAEDE,uBAAmBC,YAAnB,EAAiCC,YAAjC,EAA+CC,eAA/C,EAA+D;AAC3D,YAAG,KAAKd,mBAAL,IAA4BN,SAA/B,EAAyC;AACrC,mBAAO,KAAKM,mBAAL,CAAyBY,YAAzB,EAAuCC,YAAvC,EAAqDC,eAArD,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,EAAP;AACH;AACJ;;AAEDC,6BAAyBX,GAAzB,EAA8BY,MAA9B,EAAqC;AACjC,aAAKpB,UAAL,CAAgBmB,wBAAhB,CAAyCX,GAAzC,EAA8CY,MAA9C;AACH;AAtC+C;kBAA/BzB,a","file":"syncpoint_impl.js","sourcesContent":["import SyncPoint from './syncpoint';\n\nimport Database from './database';\nimport HttpServer from './httpserver';\n\nexport default class SyncPointImpl extends SyncPoint{\n    constructor(options){\n        super();\n        if(options == undefined){\n            options = {};\n        }\n        this.database = new Database(options);\n        this.httpserver = new HttpServer(options);\n        this.httpserver.registerSyncCallback(this.sync.bind(this));\n        this.resolvingConflicts_ = options['resolvingConflicts'];\n    }\n\n    start(){\n        this.httpserver.listen();\n    }\n\n    maxNumber(uid){\n        return this.database.maxSyncNumber(uid);\n    }\n\n    pointsAtRange(uid, minNumber, maxNumber){\n        return this.database.pointsAtRange(uid, minNumber, maxNumber - 1);\n    }\n\n    savePoints(uid, points){\n        return this.database.addPoints(uid, points);\n    }\n\n    resolvingConflicts(serverPoints, clientPoints, numberOfSegment){\n        if(this.resolvingConflicts_ != undefined){\n            return this.resolvingConflicts_(serverPoints, clientPoints, numberOfSegment);\n        } else {\n            return [];\n        }\n    }\n\n    notifyNewNumberOfSegment(uid, number){\n        this.httpserver.notifyNewNumberOfSegment(uid, number);\n    }\n}"]}